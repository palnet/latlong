""" `latlong.py` unit tests
    all values generated by encoder, verified by hand
"""

import unittest
from latlong import *


class TestPoint(unittest.TestCase):
    def equality(self):
        self.assertEqual(Point(0, 0, 0), Point(0, 0, 0))  # only checks last parameter


class TestEncode(unittest.TestCase):
    def test_valid_extremes(self):
        self.assertEqual(encodeCoords("-90 -180"), 0, "Failed encoding (-90, -180)")
        self.assertEqual(encodeCoords("-90 180"), 1048575, "Failed encoding (-90, 180)")
        self.assertEqual(encodeCoords("90 -180"), 549754765312, "Failed encoding (90, -180)")
        self.assertEqual(encodeCoords("90 180"), 549755813887, "Failed encoding (90, 180)")

    def test_zero_zero(self):
        self.assertEqual(encodeCoords("0 0"), 274878431232, "Failed encoding (0, 0)")

    def test_not_string(self):
        with self.assertRaises(TypeError):
            encodeCoords(0)

    def test_incomplete_point(self):
        with self.assertRaises(ValueError):
            encodeCoords("0")
        with self.assertRaises(ValueError):
            encodeCoords("0 0 0")

    def test_invalid_point(self):
        with self.assertRaises(ValueError):
            encodeCoords("-91 0")
        with self.assertRaises(ValueError):
            encodeCoords("91 0")
        with self.assertRaises(ValueError):
            encodeCoords("0 -181")
        with self.assertRaises(ValueError):
            encodeCoords("0 181")


class TestDecode(unittest.TestCase):
    # cannot test invalid extremes, as bit length is too long
    def test_valid_extremes(self):
        self.assertEqual(decodeCoords(0), [Point(-90, -180, 0)], "Failed decoding (-90, -180)")
        self.assertEqual(decodeCoords(1048575), [Point(-90, 180, 1048575)], "Failed decoding (-90, 180)")
        self.assertEqual(decodeCoords(549754765312), [Point(90, -180, 549754765312)], "Failed decoding (90, -180)")
        self.assertEqual(decodeCoords(549755813887), [Point(90, 180, 549755813887)], "Failed decoding (90, 180)")

    def test_zero_zero(self):
        self.assertEqual(decodeCoords(274878431232), [Point(0, 0, 274878431232)], "Failed decoding (0, 0)")

    def test_not_int(self):
        with self.assertRaises(TypeError):
            decodeCoords("foo")  # string
        with self.assertRaises(TypeError):
            decodeCoords(0.0)  # float

    def test_negative(self):
        with self.assertRaises(ValueError):
            decodeCoords(-1)


if __name__ == '__main__':
    unittest.main()
